
// painless web app build tools chain facade

build
.sass('./app.scss', {
	path:[...]
})
.css('./bloupi.css')
.postCSS('autoprefixer','lost')
.commonJS('js/main.js')
.es6('js/es6.js', build.lint({ ... }))
.babel('...')
.shim('jquery','lodash')
.images('./images', ...)
.html('./index.html', build.moustach({ ... }))
.output({
	css:'build/app.css',
	js:'build/app.js',
	html:'build/'
	images:'build/images'
})
.$install()

// deployement

deploy
.instance('production',
	deploy
	.host('167.200.45.23', 80, 'myUser')
	.mongo('...')
	.test('...')
)
.instance('staging', ...)
.instance('dev', ...)


// web app (see simple-app.js)

// scaffolding

// LL(K) parser

// documentations

// html/xml

// restful api

// ...



4x2 - y + 3 = 2;

multiply(4, power('x', 2)).minus('y').plus(3).equal(2)

4x2 + 1 = y

multiply(4, power('x', 2)).plus(1).equal('y')

x = root((y - 1)/4, 2)

root(divid(var('y').minus(1), 4), 2).equal('x')

On pouvait faire la structure d'une babelute avant Babelute.

L'intÃ©ret de Babelute c'est d'Ãªtre le pont entre le pratico-pratique ET le Machine Intelligence.




Writting papers :

#mycompany-letters+
	delivredProduct(customer, productId, time)
	{
		companiesInfos
		clientInfos(@customer)
		title('Product Delivred')
		twoColumn(
			salutations
			about(productReturn(@productId))
			delivred(@time)
			out,
			productDetail(@productId)
		)
	}


added db entry : date + #mycompany@1.12.34 delivredLetter('John Doe', '1234', '26-12-2016')

==> Customer Contract Pattern !!

